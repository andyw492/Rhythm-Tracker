#include <SFML/Audio.hpp>
#include <iostream>

using namespace std;

class AudioAnalyzer
{
public:	

	AudioAnalyzer() {}

	AudioAnalyzer(string fileName)
	{
		this->fileName = fileName;
	}

	sf::SoundBuffer doStuff()
	{
		// load an audio buffer from a sound file
		sf::SoundBuffer buffer;
		buffer.loadFromFile("Recording (82).wav");

		cout << "sample count:" << buffer.getSampleCount() << endl;
		cout << "sample rate:" << buffer.getSampleRate() << endl;
		cout << "channels:" << buffer.getChannelCount() << endl;
		cout << "duration:" << buffer.getDuration().asSeconds() << endl;

		short* samples = new short[buffer.getSampleCount()];

		const short* tempSamples = buffer.getSamples();
		long long sampleCount = buffer.getSampleCount();
		unsigned int channelCount = buffer.getChannelCount();
		unsigned int sampleRate = buffer.getSampleRate();


		short minSample = SHRT_MAX;
		short maxSample = SHRT_MIN;
		int minSampleCount;
		int maxSampleCount;

		int checkpointCount = 100000;
		for (int count = 0; count < buffer.getSampleCount(); count++)
		{
			//load samples from buffer into samples[]
			samples[count] = tempSamples[count];


			if (samples[count] < minSample)
			{
				minSample = samples[count];
				minSampleCount = count;
			}
			if (samples[count] > maxSample)
			{
				maxSample = samples[count];
				maxSampleCount = count;
			}

			if (count % 100000 == 0 && count > 0)
			{
				cout << "checkpoint " << checkpointCount << ": minSample is " << minSample
					<< " at " << minSampleCount << " and maxSample is " << maxSample << " at " << maxSampleCount << endl;

				minSample = SHRT_MAX;
				maxSample = SHRT_MIN;
				checkpointCount += 100000;
			}

		}

		buffer.loadFromSamples(samples, sampleCount, channelCount, sampleRate);

		delete[] samples;

		return buffer;
	}

private:

	string fileName;

};




#include <SFML/Audio.hpp>
#include <vector>
#include <iostream>

#include "AudioAnalyzer.cpp"
#include "AudioStream.cpp"
#include "WindowMaker.cpp"

using namespace std;

int main()
{
	AudioAnalyzer analyzer;



	sf::SoundBuffer buffer(analyzer.doStuff());

	// initialize and play our custom stream
	AudioStream stream;
	stream.load(buffer);
	//stream.play();

	// let it play until it is finished
	//while (stream.getStatus() == AudioStream::Playing)
		//sf::sleep(sf::seconds(0.1f));

	
	cout << "testaa/" << endl;

	WindowMaker windowMaker;
	windowMaker.doStuff();



	return 0;
}